class Config {
    dependencies: [];
    //one option for using simple patterns, don't like very much though
    isa: Singleton.singleton; 
}

//other option: this is how you declare Config as a Singleton
pattern Singleton {
    singleton: Config
}

class Server {
    dependencies: [ Config, ServerState ];
}

class IServerState {
    dependencies: [ Server ];
}

class CandidateState : IServerState {
    dependencies: [ Config ]; //do we need Server to be a dependency here too?
}

class FollowerState : IServerState {
    dependencies: [ Config ];
}

class LeaderState : IServerState {}

pattern State {
    context : Server;
    state_base: IServerState;
}

class Config;
pattern Singleton {
    singleton: Config
}

interface IExpr;
class AddExpr : IExpr;
class MulExpr : IExpr;
class NumExpr : IExpr;

class IVistor;
class PrintVisitor : IVisitor;
class ExecuteVisitor : IVisitor {
    dependencies: [ Config ];
}

pattern Visitor {
    acceptors: [ ^IExpr ];
    visitor_base: IVisitor;
}