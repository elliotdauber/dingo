define pattern Singleton {
    singleton: module;

    spec singleton : {
        - singleton();
        - singleton(singleton&);
        +$ singleton GetInstance();
    }
}

define pattern Visitor {
    acceptors : module[];
    visitor_base : module;

    spec acceptors : [visitor_base] {
        + void accept(visitor_base*);
    }

    spec visitor_base : [acceptors] {
        for a in acceptors {
            +@ void visit_{a}(a*) {}
        }
    }
}

module Server 
: [ServerImpl, MessageTransporter];

module FollowerImpl < ServerImpl 
: [Config];

apply pattern Singleton {
    singleton : Config;
}

apply pattern Visitor {
    acceptors: [^IExpr];
    visitor_base: IVisitor;
}

