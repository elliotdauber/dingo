define pattern PVisitor {
    acceptors : module[];
    visitor_base : module;
    visitors : module[];

    spec acceptors : [visitor_base] {
        + visitor_base accept(visitor_base*);
    }

    spec visitor_base : [acceptors] {
        for a in [acceptors] : {
            +@ a <visit_{a}>(a*);
        }
    }

    spec visitors < visitor_base : [acceptors] {
        for a in [acceptors] : {
            + a <visit_{a}>(a*);
        }
    }
}

module DIR::Visitor;
module DIR::NodeGenVisitor;
module DIR::EdgeGenVisitor;
module DIR::GraphContext;

apply pattern PVisitor as VerifierVisitor {
    acceptors: [PatternDefinition];
    visitor_base: DIR::Visitor;
    visitors: [DIR::NodeGenVisitor, DIR::EdgeGenVisitor];
}
module DIR::Verifier : [DIR::EdgeGenVisitor, DIR::NodeGenVisitor, DIR::GraphContext];

module ProgramNode;
module PatternDefinition < ProgramNode;