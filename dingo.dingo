define pattern PVisitor {
    acceptors: module[];
    visitor_base: module;
    visitors: module[];

    spec acceptors : [visitor_base] {
        + visitor_base accept(visitor_base*);
    }

    spec visitor_base : [acceptors] {
        for a in [acceptors] : {
            +@ a <visit_{a}>(a*);
        }
    }

    spec visitors < visitor_base : [acceptors] {
        for a in [acceptors] : {
            + a <visit_{a}>(a*);
        }
    }
}

module Visitor;
module NodeGenVisitor;
module EdgeGenVisitor;
module GraphContext;

apply pattern PVisitor as VerifierVisitor {
    acceptors: [PatternDefinition];
    visitor_base: Visitor;
    visitors: [NodeGenVisitor, EdgeGenVisitor];
}
module Verifier : [EdgeGenVisitor, NodeGenVisitor, GraphContext];

module ProgramNode;
module PatternDefinition < ProgramNode;