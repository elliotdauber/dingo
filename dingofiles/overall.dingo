define pattern Singleton {
    singleton: module;

    spec singleton : {
        - singleton singleton();
        - singleton singleton(singleton&);
        +$ singleton GetInstance();
    }
}

define pattern Visitor {
    acceptors : module[];
    visitor_base : module;

    spec acceptors : [visitor_base] {
        + visitor_base accept(visitor_base*);
    }

    spec visitor_base : [acceptors] {
        for a in [acceptors] : {
            +@ a <visit_{a}>(a*);
        }
    }
}

module ServerImpl;
module MessageTransporter;
module Config;

module Server 
: [ServerImpl, MessageTransporter];

module FollowerImpl < ServerImpl : [Config] {
    for a in [Config, MessageTransporter] : {
        + a <munch_{a}>();
        for b in [ServerImpl] : {
            - a <munch_{b}_{a}>(a, b);
        }
    }
}

apply pattern Singleton as Confingleton {
    singleton : Config;
}

module IVisitor;
module IExpr;

apply pattern Visitor as Vis {
    acceptors: [IExpr];
    visitor_base: IVisitor;
}

